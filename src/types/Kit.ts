// Generated by https://quicktype.io

export interface Kit {
    kit:{
        "@firmwareVersion":            string;
        "@earliestCompatibleFirmware": string;
        "@lpfMode":                    LpfMode;
        "@modFXType":                  string;
        "@modFXCurrentParam":          string;
        "@currentFilterType":          string;
        delay:                         KitDelay;
        compressor:                    Compressor;
        defaultParams:                 KitDefaultParams;
        soundSources:                  SoundSource[];
        selectedDrumIndex:             string;
    }
}

export enum LpfMode {
    The24DB = "24dB",
}

export interface Compressor {
    "@syncLevel": string;
    "@attack":    string;
    "@release":   string;
}

export interface KitDefaultParams {
    "@reverbAmount":             TartuGecko;
    "@volume":                   string;
    "@pan":                      ModFxDepth;
    "@sidechainCompressorShape": CompressorShape;
    "@modFXDepth":               ModFxDepth;
    "@modFXRate":                string;
    "@stutterRate":              ModFxDepth;
    "@sampleRateReduction":      TartuGecko;
    "@bitCrush":                 TartuGecko;
    "@modFXOffset":              ModFxDepth;
    "@modFXFeedback":            TartuGecko;
    delay:                       DefaultParamsDelay;
    lpf:                         Hpf;
    hpf:                         Hpf;
    equalizer:                   Equalizer;
}

export enum TartuGecko {
    The0X80000000 = "0x80000000",
    The0XE6666654 = "0xE6666654",
}

export enum ModFxDepth {
    The0X00000000 = "0x00000000",
}

export enum CompressorShape {
    The0XDC28F5B2 = "0xDC28F5B2",
}

export interface DefaultParamsDelay {
    "@rate":     ModFxDepth;
    "@feedback": TartuGecko;
}

export interface Equalizer {
    "@bass":            ModFxDepth;
    "@treble":          ModFxDepth;
    "@bassFrequency":   ModFxDepth;
    "@trebleFrequency": ModFxDepth;
}

export interface Hpf {
    "@frequency": string;
    "@resonance": TartuGecko;
}

export interface KitDelay {
    "@pingPong":  string;
    "@analog":    string;
    "@syncLevel": string;
}

export interface SoundSource {
    "@name":          string;
    "@polyphonic":    Polyphonic;
    "@voicePriority": string;
    "@mode":          SoundSourceMode;
    "@lpfMode":       LpfMode;
    "@modFXType":     ModFXType;
    osc1:             Osc1;
    osc2:             Osc2;
    lfo1:             Lfo1;
    lfo2:             any[];
    unison:           Unison;
    compressor:       Compressor;
    delay:            KitDelay;
    defaultParams:    SoundSourceDefaultParams;
    arpeggiator:      Arpeggiator;
    modKnobs:         ModKnob[];
}

export enum ModFXType {
    None = "none",
}

export enum SoundSourceMode {
    Subtractive = "subtractive",
}

export enum Polyphonic {
    Auto = "auto",
}

export interface Arpeggiator {
    "@mode":       ArpeggiatorMode;
    "@numOctaves": string;
    "@syncLevel":  string;
}

export enum ArpeggiatorMode {
    Off = "off",
}

export interface SoundSourceDefaultParams {
    "@arpeggiatorGate":     ModFxDepth;
    "@portamento":          TartuGecko;
    "@compressorShape":     CompressorShape;
    "@oscAVolume":          LpfFrequency;
    "@oscAPulseWidth":      ModFxDepth;
    "@oscBVolume":          TartuGecko;
    "@oscBPulseWidth":      ModFxDepth;
    "@noiseVolume":         TartuGecko;
    "@volume":              string;
    "@pan":                 ModFxDepth;
    "@lpfFrequency":        LpfFrequency;
    "@lpfResonance":        TartuGecko;
    "@hpfFrequency":        TartuGecko;
    "@hpfResonance":        TartuGecko;
    "@lfo1Rate":            Lfo1Rate;
    "@lfo2Rate":            ModFxDepth;
    "@modulator1Amount":    TartuGecko;
    "@modulator1Feedback":  TartuGecko;
    "@modulator2Amount":    TartuGecko;
    "@modulator2Feedback":  TartuGecko;
    "@carrier1Feedback":    TartuGecko;
    "@carrier2Feedback":    TartuGecko;
    "@modFXRate":           ModFxDepth;
    "@modFXDepth":          ModFxDepth;
    "@delayRate":           ModFxDepth;
    "@delayFeedback":       TartuGecko;
    "@reverbAmount":        TartuGecko;
    "@arpeggiatorRate":     ModFxDepth;
    "@stutterRate":         ModFxDepth;
    "@sampleRateReduction": TartuGecko;
    "@bitCrush":            TartuGecko;
    "@modFXOffset":         ModFxDepth;
    "@modFXFeedback":       ModFxDepth;
    envelope1:              Envelope;
    envelope2:              Envelope;
    patchCables:            PatchCables;
    equalizer:              Equalizer;
}

export enum Lfo1Rate {
    The0X1999997E = "0x1999997E",
}

export enum LpfFrequency {
    The0X7FFFFFFF = "0x7FFFFFFF",
}

export interface Envelope {
    "@attack":  TartuGecko;
    "@decay":   TartuGecko;
    "@sustain": Sustain;
    "@release": TartuGecko;
}

export enum Sustain {
    The0X7FFFFFD2 = "0x7FFFFFD2",
    The0XFFFFFFE9 = "0xFFFFFFE9",
}

export interface PatchCables {
    patchCable: PatchCable;
}

export interface PatchCable {
    "@source":      Source;
    "@destination": Destination;
    "@amount":      Amount;
}

export enum Amount {
    The0X3FFFFFE8 = "0x3FFFFFE8",
}

export enum Destination {
    Volume = "volume",
}

export enum Source {
    Velocity = "velocity",
}

export interface Lfo1 {
    "@syncLevel": string;
}

export interface ModKnob {
    "@controlsParam":          ControlsParam;
    "@patchAmountFromSource"?: PatchAmountFromSource;
}

export enum ControlsParam {
    BitcrushAmount = "bitcrushAmount",
    DelayFeedback = "delayFeedback",
    DelayRate = "delayRate",
    Env1Attack = "env1Attack",
    Env1Release = "env1Release",
    Lfo1Rate = "lfo1Rate",
    LpfFrequency = "lpfFrequency",
    LpfResonance = "lpfResonance",
    Pan = "pan",
    Pitch = "pitch",
    ReverbAmount = "reverbAmount",
    SampleRateReduction = "sampleRateReduction",
    StutterRate = "stutterRate",
    VolumePostFX = "volumePostFX",
    VolumePostReverbSend = "volumePostReverbSend",
}

export enum PatchAmountFromSource {
    Compressor = "compressor",
    Lfo1 = "lfo1",
}

export interface Osc1 {
    "@loopMode":          string;
    "@reversed":          string;
    "@timeStretchEnable": string;
    "@timeStretchAmount": string;
    "@fileName"?:          string;
    zone:                 Zone;
}

export interface Zone {
    "@startSamplePos": string;
    "@endSamplePos":   string;
}

export interface Osc2 {
    "@loopMode":          string;
    "@reversed":          string;
    "@timeStretchEnable": string;
    "@timeStretchAmount": string;
    "@fileName"?:          string;
}

export interface Unison {
    "@num":    string;
    "@detune": string;
}
